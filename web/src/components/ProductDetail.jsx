// src/components/ProductDetail.jsx
import { useParams, Link } from "react-router-dom";
import { useEffect, useState } from "react";
// 1. Import c√°c h√†m Firestore c·∫ßn thi·∫øt v√† instance 'db'
import { doc, getDoc, collection, query, where, getDocs, limit } from "firebase/firestore"; 
import { db } from '../firebase'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng
import './ProductDetail.css'; // Import CSS

function ProductDetail({ onAdd }) {
    const { id } = useParams(); // L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
    const [product, setProduct] = useState(null);
    const [restaurant, setRestaurant] = useState(null); // Gi·ªØ l·∫°i state nh√† h√†ng n·∫øu c·∫ßn
    const [relatedProducts, setRelatedProducts] = useState([]);
    const [loading, setLoading] = useState(true); // State theo d√µi t·∫£i d·ªØ li·ªáu

    // --- L·∫•y chi ti·∫øt s·∫£n ph·∫©m t·ª´ Firestore ---
    useEffect(() => {
        const fetchProductDetail = async () => {
            setLoading(true); // B·∫Øt ƒë·∫ßu t·∫£i
            try {
                // 2. T·∫°o tham chi·∫øu ƒë·∫øn document s·∫£n ph·∫©m trong collection "products"
                const productDocRef = doc(db, "products", id); 
                // 3. L·∫•y d·ªØ li·ªáu c·ªßa document ƒë√≥
                const docSnap = await getDoc(productDocRef); 

                if (docSnap.exists()) {
                    // N·∫øu document t·ªìn t·∫°i, g√°n d·ªØ li·ªáu v√†o state
                    const productData = { id: docSnap.id, ...docSnap.data() };
                    setProduct(productData);

                    // 3.1 (Th√™m) Fetch th√¥ng tin nh√† h√†ng n·∫øu product c√≥ restaurantId
                    if (productData.restaurantId) {
                         try {
                            const restaurantDocRef = doc(db, "restaurants", productData.restaurantId);
                            const restaurantSnap = await getDoc(restaurantDocRef);
                            if (restaurantSnap.exists()) {
                                setRestaurant({ id: restaurantSnap.id, ...restaurantSnap.data() });
                            } else {
                                console.warn("Kh√¥ng t√¨m th·∫•y nh√† h√†ng v·ªõi ID:", productData.restaurantId);
                            }
                         } catch (restaurantErr) {
                             console.error("L·ªói khi fetch nh√† h√†ng:", restaurantErr);
                         }
                    }

                } else {
                    // N·∫øu kh√¥ng t√¨m th·∫•y
                    console.log("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID:", id);
                    setProduct(null); // Ho·∫∑c c√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang 404
                }
            } catch (err) {
                console.error("L·ªói khi fetch chi ti·∫øt s·∫£n ph·∫©m:", err);
            } finally {
                setLoading(false); // K·∫øt th√∫c t·∫£i
            }
        };
        fetchProductDetail();
    }, [id]); // Ch·∫°y l·∫°i khi ID tr√™n URL thay ƒë·ªïi

    // --- L·∫•y danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω t·ª´ Firestore ---
    useEffect(() => {
        const fetchRelatedProducts = async () => {
            // Ch·ªâ ch·∫°y khi ƒë√£ c√≥ th√¥ng tin s·∫£n ph·∫©m ch√≠nh (ƒë·ªÉ bi·∫øt category)
            if (product && product.category) {
                try {
                    const productsCol = collection(db, "products");
                    // 4. T·∫°o query: l·∫•y products c√πng category, kh√°c ID hi·ªán t·∫°i, gi·ªõi h·∫°n 4
                    const q = query(
                        productsCol,
                        where("category", "==", product.category), // L·ªçc theo category
                        where("__name__", "!=", id), // Lo·∫°i tr·ª´ ch√≠nh s·∫£n ph·∫©m ƒëang xem (__name__ l√† ID document)
                        limit(4) // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
                    );
                    // 5. Th·ª±c thi query
                    const querySnapshot = await getDocs(q);
                    // 6. X·ª≠ l√Ω k·∫øt qu·∫£
                    const relatedList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    setRelatedProducts(relatedList);
                } catch (err) {
                    console.error("L·ªói khi fetch s·∫£n ph·∫©m g·ª£i √Ω:", err);
                }
            }
        };
        // Ch·∫°y khi c√≥ th√¥ng tin 'product' ho·∫∑c 'id' thay ƒë·ªïi
        fetchRelatedProducts(); 
    }, [product, id]); 

    // Hi·ªÉn th·ªã loading
    if (loading) {
        return <p className="loading-message">‚è≥ ƒêang t·∫£i s·∫£n ph·∫©m...</p>;
    }
    // Hi·ªÉn th·ªã n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
    if (!product) {
        return <p className="loading-message">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.</p>;
    }

    // T√≠nh gi√° gi·∫£m (gi·ªØ nguy√™n)
    const discountedPrice = product.discount
        ? Math.round(product.price * (1 - product.discount / 100))
        : product.price;

    // JSX return (ƒê√£ c·∫≠p nh·∫≠t onAdd ƒë·ªÉ g·ª≠i th√¥ng tin nh√† h√†ng)
    return (
        <div className="product-detail-page">
            <div className="product-detail-container">
                {/* ·∫¢nh s·∫£n ph·∫©m */}
                <div className="product-detail-image">
                    <img src={product.img} alt={product.name} />
                </div>

                {/* Th√¥ng tin chi ti·∫øt */}
                <div className="product-detail-info">
                    <h2 className="product-name">{product.name}</h2>

                    <div className="rating-section">
                        <span className="stars">‚≠ê {product.rating || 4.5}</span>
                        <span className="reviews">
                            ({product.reviews || 100} ƒë√°nh gi√°)
                        </span>
                    </div>

                    <div className="price-section">
                        {product.discount > 0 ? (
                            <>
                                <p className="price-discounted">{discountedPrice.toLocaleString()}‚Ç´</p>
                                <p className="price-original">{product.price.toLocaleString()}‚Ç´</p>
                                <span className="discount-badge">-{product.discount}%</span>
                            </>
                        ) : (
                            <p className="price-discounted">{product.price.toLocaleString()}‚Ç´</p>
                        )}
                    </div>

                    {/* Hi·ªÉn th·ªã t√™n nh√† h√†ng */}
                    {restaurant && (
                        <p className="restaurant-name">
                            Nh√† h√†ng: <strong>{restaurant.name}</strong>
                        </p>
                    )}

                    <p className="product-description">{product.description}</p>

                    {product.ingredients && (
                        <div className="ingredients">
                            <h4>Nguy√™n li·ªáu:</h4>
                            <ul>
                                {product.ingredients.map((item, index) => (
                                    <li key={index}>{item}</li>
                                ))}
                            </ul>
                        </div>
                    )}

                    {/* C·∫≠p nh·∫≠t onAdd ƒë·ªÉ g·ª≠i c·∫£ th√¥ng tin nh√† h√†ng */}
                    <button
                        className="add-to-cart-btn-detail"
                        onClick={() =>
                            onAdd({
                                ...product,
                                restaurantId: product.restaurantId || null, // ƒê·∫£m b·∫£o g·ª≠i restaurantId
                                restaurantName: restaurant?.name || "Ch∆∞a x√°c ƒë·ªãnh",
                            })
                        }
                    >
                        üõí Th√™m v√†o gi·ªè h√†ng
                    </button>

                    <div className="product-deal-progress">
                        <div className="progress-header">
                            <span>S·∫Øp ch√°y h√†ng!</span>
                            <span className="claimed">84% ƒë√£ b√°n</span>
                        </div>
                        <div className="progress-bar-container">
                            <div
                                className="progress-bar-fill"
                                style={{ width: "84%" }}
                            ></div>
                        </div>
                    </div>

                    <Link to="/" className="back-link">
                        ‚¨Ö Quay l·∫°i danh s√°ch s·∫£n ph·∫©m
                    </Link>
                </div>
            </div>

            {/* S·∫£n ph·∫©m g·ª£i √Ω (ƒê√£ s·ª≠a Link v√† onClick cho n√∫t Th√™m) */}
            <div className="related-products">
                <h3>G·ª£i √Ω cho b·∫°n</h3>
                <div className="related-grid">
                    {relatedProducts.length > 0 ? (
                        relatedProducts.map((item) => (
                            <Link 
                                key={item.id} 
                                to={`/product-detail/${item.id}`} 
                                className="related-item-link" 
                            >
                                <div className="related-item">
                                    <img src={item.img} alt={item.name} />
                                    <h4>{item.name}</h4>
                                    <p>{item.price.toLocaleString()}‚Ç´</p>
                                    <button
                                        className="add-btn"
                                        onClick={(e) => { 
                                            e.preventDefault(); 
                                            // G·ª≠i c·∫£ th√¥ng tin nh√† h√†ng c·ªßa s·∫£n ph·∫©m g·ª£i √Ω (n·∫øu c·∫ßn)
                                            // B·∫°n c·∫ßn fetch th√¥ng tin nh√† h√†ng cho item n√†y n·∫øu mu·ªën hi·ªÉn th·ªã t√™n
                                            onAdd({ 
                                                ...item,
                                                restaurantId: item.restaurantId || null,
                                                restaurantName: "N/A" // C·∫ßn fetch ri√™ng n·∫øu mu·ªën t√™n nh√† h√†ng ·ªü ƒë√¢y
                                             });
                                        }}
                                    >
                                        üõí Th√™m
                                    </button>
                                </div>
                            </Link>
                        ))
                    ) : (
                        <p>Kh√¥ng c√≥ s·∫£n ph·∫©m t∆∞∆°ng t·ª±.</p>
                    )}
                </div>
            </div>
        </div>
    );
}

export default ProductDetail;