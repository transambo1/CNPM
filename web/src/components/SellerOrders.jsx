import React, { useEffect, useState } from "react";
import { collection, getDocs, doc, updateDoc } from "firebase/firestore";
import { db } from "../firebase"; // ƒë∆∞·ªùng d·∫´n t√πy c·∫•u tr√∫c d·ª± √°n

function SellerOrders() {
  const [orders, setOrders] = useState([]);

  // üì¶ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng t·ª´ Firestore
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "orders"));
        const data = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setOrders(data);
      } catch (err) {
        console.error("‚ùå L·ªói l·∫•y ƒë∆°n h√†ng:", err);
      }
    };

    fetchOrders();
  }, []);

  // üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong Firestore
  const updateStatus = async (orderId, newStatus) => {
    try {
      const orderRef = doc(db, "orders", orderId);
      await updateDoc(orderRef, { status: newStatus });

      // C·∫≠p nh·∫≠t l·∫°i state local
      setOrders((prev) =>
        prev.map((order) =>
          order.id === orderId ? { ...order, status: newStatus } : order
        )
      );

      alert(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n #${orderId} th√†nh "${newStatus}"`);
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    }
  };

  return (
    <div className="container">
      <h2>üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
      {orders.length === 0 ? (
        <p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</p>
      ) : (
        <table border="1" cellPadding="10" style={{ width: "100%", marginTop: "20px" }}>
          <thead>
            <tr>
              <th>ID</th>
              <th>Kh√°ch h√†ng</th>
              <th>S·∫£n ph·∫©m</th>
              <th>T·ªïng ti·ªÅn</th>
              <th>Ng√†y ƒë·∫∑t</th>
              <th>ƒê·ªãa ch·ªâ</th>
              <th>Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order) => (
              <tr key={order.id}>
                <td>#{order.id}</td>
                <td>{order.customer?.name || "Kh√¥ng r√µ"}</td>
                <td>
                  {order.items?.map((item, i) => (
                    <div key={i}>
                      {item.name} x {item.quantity}
                    </div>
                  ))}
                </td>
                <td>{order.total?.toLocaleString()}‚Ç´</td>
                <td>{new Date(order.date?.seconds * 1000).toLocaleString()}</td>
                <td>{order.customer?.address}</td>
                <td>
                  <select
                    value={order.status}
                    onChange={(e) => updateStatus(order.id, e.target.value)}
                  >
                    <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
                    <option value="ƒê√£ x·ª≠ l√Ω">ƒê√£ x·ª≠ l√Ω</option>
                    <option value="ƒêang giao">ƒêang giao</option>
                    <option value="ƒê√£ giao">ƒê√£ giao</option>
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default SellerOrders;
